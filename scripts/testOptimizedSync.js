/**
 * Script para testar o sistema de sincroniza√ß√£o otimizada integrado
 */

require('dotenv').config();
const PersistentSyncManager = require('../server/services/persistentSyncManager');
const { executeSQL } = require('../DATABASE_ACCESS_CONFIG');

async function testOptimizedSync() {
  console.log('üß™ Testando Sistema de Sincroniza√ß√£o OTIMIZADA\n');
  
  console.log('‚úÖ Estrat√©gias de Otimiza√ß√£o Implementadas:');
  console.log('   üìä Reports API - Uma chamada retorna milhares de dados');
  console.log('   üß† Cache Inteligente - Reduz chamadas desnecess√°rias');
  console.log('   üì¶ Batch Requests - Agrupa m√∫ltiplos itens (20 ASINs/call)');
  console.log('   üéØ Prioriza√ß√£o - Best sellers primeiro');
  console.log('   ‚ö° Rate Limiting - Respeita limites oficiais da Amazon');
  console.log('   üîÑ Retry Autom√°tico - Backoff exponencial');
  console.log('   üíæ Persist√™ncia - Continua de onde parou\n');

  try {
    const syncManager = new PersistentSyncManager();
    
    // Verificar conex√£o com banco
    console.log('üîç Verificando conex√£o com PostgreSQL...');
    await executeSQL('SELECT 1');
    console.log('‚úÖ PostgreSQL conectado\n');
    
    // Verificar estado da fila
    console.log('üìã Estado atual da fila de sincroniza√ß√£o:');
    const stats = await syncManager.getQueueStats();
    console.table(stats);
    
    // Verificar estat√≠sticas de otimiza√ß√£o
    console.log('\nüìä Estat√≠sticas das Estrat√©gias de Otimiza√ß√£o:');
    const optimizationStats = await syncManager.getOptimizationStats();
    if (Object.keys(optimizationStats).length > 0) {
      console.table(optimizationStats);
    } else {
      console.log('   (Nenhuma execu√ß√£o anterior encontrada)');
    }
    
    // Enfileirar sincroniza√ß√£o otimizada
    console.log('\nüöÄ Enfileirando Sincroniza√ß√£o Otimizada...');
    const taskIds = await syncManager.enqueueBulkSync();
    console.log(`‚úÖ ${taskIds.length} tarefas otimizadas enfileiradas:`, taskIds);
    
    // Mostrar exemplos de uso das estrat√©gias
    console.log('\nüí° Exemplos de como as estrat√©gias funcionam:');
    
    console.log('\nüìä Reports API Strategy:');
    console.log('   - Ao inv√©s de fazer 1000 chamadas para products');
    console.log('   - Faz 1 chamada GET_MERCHANT_LISTINGS_ALL_DATA');
    console.log('   - Recebe CSV com todos os produtos de uma vez');
    
    console.log('\nüß† Cache Strategy:');
    console.log('   - Seller data: cache 24h');
    console.log('   - Catalog data: cache 6h');
    console.log('   - Pricing data: cache 5min');
    
    console.log('\nüì¶ Batch Strategy:');
    console.log('   - Pricing: 20 ASINs por chamada');
    console.log('   - Reduz de 100 chamadas para 5 chamadas');
    
    console.log('\nüéØ Priority Strategy:');
    console.log('   - Best sellers: sync a cada 15min');
    console.log('   - Produtos m√©dios: sync a cada 1h');
    console.log('   - Produtos lentos: sync di√°rio');
    
    // Exemplo de batch pricing
    console.log('\nüß™ Testando Batch Pricing (exemplo):');
    const exampleAsins = ['B07XJ8C8F5', 'B08N5WRWNW', 'B07ZPKN6YR'];
    const batchTaskIds = await syncManager.enqueueBatchPricing(exampleAsins);
    console.log(`‚úÖ Batch pricing enfileirado para ${exampleAsins.length} ASINs:`, batchTaskIds);
    
    console.log('\nüìà Estado final da fila:');
    const finalStats = await syncManager.getQueueStats();
    console.table(finalStats);
    
    console.log('\nüéØ PR√ìXIMOS PASSOS:');
    console.log('1. Execute: node scripts/startPersistentSync.js');
    console.log('2. O sistema processar√° automaticamente as tarefas otimizadas');
    console.log('3. Monitore: https://appproft.com/insights');
    console.log('4. Dados: https://appproft.com/amazon-data');
    
    console.log('\n‚úÖ Teste de integra√ß√£o das estrat√©gias de otimiza√ß√£o CONCLU√çDO!');
    console.log('üí° O sistema agora usa TODAS as estrat√©gias de otimiza√ß√£o automaticamente.');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
    console.log('\nüîß Poss√≠veis solu√ß√µes:');
    console.log('1. Verificar se PostgreSQL est√° rodando');
    console.log('2. Verificar credenciais no .env');
    console.log('3. Executar migrations do banco');
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  testOptimizedSync();
}

module.exports = { testOptimizedSync };