require('dotenv').config();
const { executeSQL } = require('../DATABASE_ACCESS_CONFIG');

/**
 * Script otimizado para sincroniza√ß√£o respeitando rate limits da Amazon
 * Usa estrat√©gias para minimizar chamadas √† API
 */

async function optimizedSync() {
  console.log('üöÄ Iniciando sincroniza√ß√£o otimizada com Amazon SP-API\n');
  console.log('üìä Estrat√©gias para contornar rate limits:\n');
  
  console.log('1Ô∏è‚É£ REPORTS API - Dados em Massa');
  console.log('   ‚úÖ Use GET_MERCHANT_LISTINGS_ALL_DATA para catalog completo');
  console.log('   ‚úÖ Use GET_FBA_MYI_ALL_INVENTORY_DATA para inventory');
  console.log('   ‚úÖ Use GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE para orders');
  console.log('   üí° 1 report = milhares de registros vs milhares de chamadas\n');
  
  console.log('2Ô∏è‚É£ CACHE INTELIGENTE - Reduza Chamadas');
  console.log('   ‚úÖ Sellers: Cache 24h (muda raramente)');
  console.log('   ‚úÖ Catalog: Cache 6h (produtos n√£o mudam muito)');
  console.log('   ‚úÖ Inventory: Cache 30min (razo√°vel para maioria)');
  console.log('   ‚úÖ Pricing: Cache 5-15min (muda frequentemente)\n');
  
  console.log('3Ô∏è‚É£ BATCH REQUESTS - Agrupe Dados');
  console.log('   ‚úÖ Pricing: At√© 20 ASINs por chamada');
  console.log('   ‚úÖ Orders: Use filtros de data para pegar v√°rios');
  console.log('   ‚úÖ Catalog: Use getItemsByAsins com m√∫ltiplos ASINs\n');
  
  console.log('4Ô∏è‚É£ PRIORIZA√á√ÉO - Foque no Importante');
  console.log('   ‚úÖ Sincronize best sellers mais frequentemente');
  console.log('   ‚úÖ Produtos sem vendas: sync 1x/dia');
  console.log('   ‚úÖ Use webhooks para mudan√ßas em tempo real\n');
  
  console.log('5Ô∏è‚É£ HOR√ÅRIOS ESTRAT√âGICOS');
  console.log('   ‚úÖ Sync pesado de madrugada (menos concorr√™ncia)');
  console.log('   ‚úÖ Updates cr√≠ticos durante o dia');
  console.log('   ‚úÖ Distribua carga ao longo de 24h\n');
  
  // Exemplo de implementa√ß√£o otimizada
  console.log('üìù Exemplo de C√≥digo Otimizado:\n');
  
  const exampleCode = `
// 1. Criar Report para dados em massa
async function syncViaReports() {
  // Inventory Report - 1 chamada retorna TODOS os produtos
  const inventoryReport = await createReport({
    reportType: 'GET_FBA_MYI_ALL_INVENTORY_DATA',
    marketplaceIds: ['ATVPDKIKX0DER']
  });
  
  // Aguardar processamento (polling a cada 30s)
  const reportData = await waitForReport(inventoryReport.reportId);
  
  // Processar milhares de registros de uma vez
  await processInventoryBulk(reportData);
}

// 2. Cache com Redis ou em mem√≥ria
const cache = new Map();
const CACHE_TIMES = {
  sellers: 24 * 60 * 60 * 1000,    // 24 horas
  catalog: 6 * 60 * 60 * 1000,     // 6 horas
  inventory: 30 * 60 * 1000,        // 30 minutos
  pricing: 5 * 60 * 1000            // 5 minutos
};

async function getCachedOrFetch(key, fetcher, cacheType) {
  const cached = cache.get(key);
  if (cached && Date.now() - cached.time < CACHE_TIMES[cacheType]) {
    return cached.data;
  }
  
  const data = await fetcher();
  cache.set(key, { data, time: Date.now() });
  return data;
}

// 3. Batch pricing requests
async function getBatchPricing(asins) {
  const batches = [];
  for (let i = 0; i < asins.length; i += 20) {
    batches.push(asins.slice(i, i + 20));
  }
  
  const results = [];
  for (const batch of batches) {
    const prices = await spApi.callAPI({
      operation: 'getItemOffersBatch',
      body: {
        requests: batch.map(asin => ({
          uri: \`/products/pricing/v0/items/\${asin}/offers\`,
          method: 'GET',
          MarketplaceId: 'ATVPDKIKX0DER'
        }))
      }
    });
    results.push(...prices);
    
    // Respeitar rate limit entre batches
    await new Promise(r => setTimeout(r, 100)); // 100ms = 10 req/seg
  }
  
  return results;
}

// 4. Sincroniza√ß√£o por prioridade
async function syncByPriority() {
  // Best sellers - sync a cada 15 min
  const bestSellers = await getTopProducts(20);
  await syncProducts(bestSellers, { 
    inventory: true, 
    pricing: true, 
    competitors: true 
  });
  
  // Produtos m√©dios - sync a cada hora
  const regularProducts = await getRegularProducts();
  await syncProducts(regularProducts, { 
    inventory: true, 
    pricing: false  // Pricing menos frequente
  });
  
  // Produtos sem venda - sync 1x/dia
  const slowMovers = await getSlowMovers();
  await syncProducts(slowMovers, { 
    inventory: true  // S√≥ inventory
  });
}
`;

  console.log(exampleCode);
  
  console.log('\n‚è∞ Cronograma Sugerido:');
  console.log('- A cada 15min: Pricing dos top 20 produtos');
  console.log('- A cada 30min: Inventory via Reports API');
  console.log('- A cada 1h: Orders dos √∫ltimos 60min');
  console.log('- A cada 6h: Catalog completo via Reports');
  console.log('- A cada 24h: Sellers info (cache longo)');
  
  console.log('\nüìà Resultado Esperado:');
  console.log('‚úÖ Redu√ß√£o de 90% nas chamadas √† API');
  console.log('‚úÖ Sincroniza√ß√£o completa sem erros 429');
  console.log('‚úÖ Dados sempre atualizados para decis√µes');
  console.log('‚úÖ Sistema escal√°vel para milhares de produtos');
  
  console.log('\nüí° Pr√≥ximos Passos:');
  console.log('1. Implementar Reports API no dataCollector.js');
  console.log('2. Adicionar Redis para cache distribu√≠do');
  console.log('3. Configurar webhooks para updates em tempo real');
  console.log('4. Implementar fila de prioriza√ß√£o');
}

optimizedSync();