const { getDataCollector } = require('../server/services/dataCollector');
const { executeSQL } = require('../DATABASE_ACCESS_CONFIG');
const secureLogger = require('../server/utils/secureLogger');

async function forceSync() {
  try {
    console.log('üöÄ For√ßando sincroniza√ß√£o imediata com Amazon...\n');
    
    const dataCollector = getDataCollector();
    const tenantId = 1; // Usar tenant ID 1
    
    // Resultados
    const results = {
      inventory: { success: 0, errors: 0 },
      pricing: { success: 0, errors: 0 },
      competitors: { success: 0, errors: 0 },
      sales: { success: 0, errors: 0 },
      orders: { success: 0, errors: 0 },
      keywords: { success: 0, errors: 0 },
      advertising: { success: 0, errors: 0 }
    };
    
    console.log('üì¶ Coletando invent√°rio...');
    try {
      await dataCollector.collectInventory(tenantId, results.inventory);
      console.log(`‚úÖ Invent√°rio: ${results.inventory.success} produtos sincronizados`);
    } catch (error) {
      console.error('‚ùå Erro no invent√°rio:', error.message);
    }
    
    console.log('\nüí∞ Coletando pre√ßos e competidores...');
    try {
      await dataCollector.collectPricingAndCompetitors(tenantId, results.pricing, results.competitors);
      console.log(`‚úÖ Pre√ßos: ${results.pricing.success} atualizados`);
      console.log(`‚úÖ Competidores: ${results.competitors.success} rastreados`);
    } catch (error) {
      console.error('‚ùå Erro em pre√ßos/competidores:', error.message);
    }
    
    console.log('\nüìä Coletando vendas e ordens...');
    try {
      await dataCollector.collectSalesAndOrders(tenantId, results.sales, results.orders);
      console.log(`‚úÖ Vendas: ${results.sales.success} registradas`);
      console.log(`‚úÖ Ordens: ${results.orders.success} processadas`);
    } catch (error) {
      console.error('‚ùå Erro em vendas/ordens:', error.message);
    }
    
    console.log('\nüîç Coletando keywords e advertising...');
    try {
      await dataCollector.collectKeywordsAndAdvertising(tenantId, results.keywords, results.advertising);
      console.log(`‚úÖ Keywords: ${results.keywords.success} analisadas`);
      console.log(`‚úÖ Advertising: ${results.advertising.success} campanhas sincronizadas`);
    } catch (error) {
      console.error('‚ùå Erro em keywords/advertising:', error.message);
    }
    
    // Resumo final
    console.log('\nüìà Resumo da Sincroniza√ß√£o:');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    let totalSuccess = 0;
    let totalErrors = 0;
    
    Object.entries(results).forEach(([key, value]) => {
      totalSuccess += value.success;
      totalErrors += value.errors;
      console.log(`${key}: ${value.success} sucesso, ${value.errors} erros`);
    });
    
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    console.log(`TOTAL: ${totalSuccess} sucessos, ${totalErrors} erros`);
    
    // Verificar dados salvos
    console.log('\nüîç Verificando dados salvos no banco...');
    
    const counts = await executeSQL(`
      SELECT 
        (SELECT COUNT(*) FROM products WHERE tenant_id = 1) as products,
        (SELECT COUNT(*) FROM inventory_snapshots WHERE created_at > NOW() - INTERVAL '1 hour') as inventory,
        (SELECT COUNT(*) FROM competitor_tracking_advanced WHERE timestamp > NOW() - INTERVAL '1 hour') as competitors,
        (SELECT COUNT(*) FROM sales_metrics WHERE date >= CURRENT_DATE) as sales,
        (SELECT COUNT(*) FROM orders WHERE created_at > NOW() - INTERVAL '1 day') as orders
    `);
    
    console.log('\nüìä Dados no banco:');
    console.log(`- Produtos: ${counts.rows[0].products}`);
    console.log(`- Snapshots de invent√°rio (√∫ltima hora): ${counts.rows[0].inventory}`);
    console.log(`- Rastreamento de competidores (√∫ltima hora): ${counts.rows[0].competitors}`);
    console.log(`- M√©tricas de vendas (hoje): ${counts.rows[0].sales}`);
    console.log(`- Ordens (√∫ltimo dia): ${counts.rows[0].orders}`);
    
    console.log('\n‚úÖ Sincroniza√ß√£o for√ßada conclu√≠da!');
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erro fatal:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// Executar com delay para garantir conex√µes
console.log('‚è≥ Aguardando 2 segundos para estabilizar conex√µes...\n');
setTimeout(forceSync, 2000);