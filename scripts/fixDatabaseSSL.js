const fs = require('fs');
const path = require('path');

// Lista de arquivos que precisam ter SSL desabilitado
const filesToFix = [
  '../server/db/pool.js',
  '../workers/aiDataCollectionWorker.js',
  '../workers/competitorDataWorker.js',
  '../server/services/dataCollector.js'
];

function fixSSLInFile(filePath) {
  try {
    const fullPath = path.join(__dirname, filePath);
    
    if (!fs.existsSync(fullPath)) {
      console.log(`‚ö†Ô∏è  Arquivo n√£o encontrado: ${filePath}`);
      return;
    }
    
    let content = fs.readFileSync(fullPath, 'utf8');
    let modified = false;
    
    // Padr√£o 1: new Pool({ ... })
    if (content.includes('new Pool({') && !content.includes('ssl: false')) {
      content = content.replace(
        /new Pool\({([^}]+)}\)/g,
        (match, poolConfig) => {
          if (!poolConfig.includes('ssl:')) {
            return `new Pool({${poolConfig},\n  ssl: false\n})`;
          }
          return match;
        }
      );
      modified = true;
    }
    
    // Padr√£o 2: createPool({ ... })
    if (content.includes('createPool({') && !content.includes('ssl: false')) {
      content = content.replace(
        /createPool\({([^}]+)}\)/g,
        (match, poolConfig) => {
          if (!poolConfig.includes('ssl:')) {
            return `createPool({${poolConfig},\n  ssl: false\n})`;
          }
          return match;
        }
      );
      modified = true;
    }
    
    if (modified) {
      fs.writeFileSync(fullPath, content);
      console.log(`‚úÖ SSL desabilitado em: ${filePath}`);
    } else {
      console.log(`‚úì  ${filePath} j√° est√° configurado corretamente`);
    }
    
  } catch (error) {
    console.error(`‚ùå Erro ao processar ${filePath}:`, error.message);
  }
}

console.log('üîß Corrigindo configura√ß√£o SSL do PostgreSQL...\n');

// Corrigir cada arquivo
filesToFix.forEach(fixSSLInFile);

// Verificar se existe um arquivo .env e adicionar vari√°vel se necess√°rio
const envPath = path.join(__dirname, '../.env');
if (fs.existsSync(envPath)) {
  let envContent = fs.readFileSync(envPath, 'utf8');
  
  if (!envContent.includes('PGSSLMODE')) {
    envContent += '\n# Desabilitar SSL para conex√£o local\nPGSSLMODE=disable\n';
    fs.writeFileSync(envPath, envContent);
    console.log('\n‚úÖ Vari√°vel PGSSLMODE=disable adicionada ao .env');
  }
}

console.log('\n‚úÖ Configura√ß√£o SSL corrigida!');
console.log('\nüìù Pr√≥ximos passos:');
console.log('1. Reinicie os workers se estiverem rodando');
console.log('2. Execute: node workers/aiDataCollectionWorker.js');
console.log('3. Acesse: http://localhost:3000/amazon-data');