// Script de exemplo para configurar competidores manuais de um brand owner

require('dotenv').config();
const pool = require('../server/db/pool');
const tokenManager = require('../server/services/tokenManager');
const AmazonService = require('../server/services/amazonService');
const BrandOwnerCompetitorService = require('../server/services/brandOwnerCompetitorService');

async function exampleBrandOwnerSetup() {
  console.log('üè∑Ô∏è EXEMPLO DE CONFIGURA√á√ÉO PARA BRAND OWNER');
  console.log('='.repeat(50));
  
  try {
    // 1. Inicializar servi√ßos
    console.log('1Ô∏è‚É£ Inicializando servi√ßos...');
    const amazonService = new AmazonService(tokenManager, 'default');
    const brandOwnerService = new BrandOwnerCompetitorService(amazonService, pool);
    
    // 2. Adicionar um brand owner (exemplo)
    console.log('\n2Ô∏è‚É£ Adicionando brand owner de exemplo...');
    
    const sellerId = process.env.AMAZON_SELLER_ID || 'EXAMPLE_SELLER_123';
    const brandName = 'Minha Marca Exclusiva';
    
    const brandOwnerId = await brandOwnerService.addBrandOwner(
      sellerId,
      brandName,
      true // √© vendedor exclusivo
    );
    
    console.log(`‚úÖ Brand owner criado com ID: ${brandOwnerId}`);
    
    // 3. Buscar alguns produtos do cat√°logo atual
    console.log('\n3Ô∏è‚É£ Buscando produtos do cat√°logo...');
    
    const productsResult = await pool.query(`
      SELECT asin, name FROM products 
      WHERE asin IS NOT NULL 
      LIMIT 3
    `);
    
    if (productsResult.rows.length === 0) {
      console.log('‚ùå Nenhum produto encontrado no cat√°logo');
      return;
    }
    
    // 4. Adicionar o primeiro produto como produto do brand owner
    const ourProduct = productsResult.rows[0];
    console.log(`\n4Ô∏è‚É£ Configurando produto do brand owner:`);
    console.log(`   ASIN: ${ourProduct.asin}`);
    console.log(`   Nome: ${ourProduct.name.substring(0, 50)}...`);
    
    await brandOwnerService.addBrandOwnerProduct(
      brandOwnerId,
      ourProduct.asin,
      ourProduct.name
    );
    
    console.log('‚úÖ Produto adicionado ao brand owner');
    
    // 5. Definir outros produtos como competidores manuais
    console.log('\n5Ô∏è‚É£ Definindo competidores manuais...');
    
    for (let i = 1; i < productsResult.rows.length; i++) {
      const competitor = productsResult.rows[i];
      
      console.log(`\n   Adicionando competidor ${i}:`);
      console.log(`   ASIN: ${competitor.asin}`);
      console.log(`   Nome: ${competitor.name.substring(0, 50)}...`);
      
      const competitorId = await brandOwnerService.addManualCompetitor(
        sellerId,
        ourProduct.asin,        // nosso ASIN
        competitor.asin,        // ASIN do competidor
        'Marca Concorrente',    // marca do competidor
        'direct',               // competi√ß√£o direta
        `Competidor ${i} - Produto similar`
      );
      
      console.log(`   ‚úÖ Competidor adicionado com ID: ${competitorId}`);
    }
    
    // 6. Executar monitoramento inicial
    console.log('\n6Ô∏è‚É£ Executando monitoramento inicial...');
    
    const monitoringResult = await brandOwnerService.monitorAllBrandOwnerCompetitors(sellerId);
    console.log('\nüìä Resultado do monitoramento:');
    console.log(`   ‚úÖ Sucesso: ${monitoringResult.success}`);
    console.log(`   ‚ùå Erros: ${monitoringResult.errors}`);
    console.log(`   üí° Insights gerados: ${monitoringResult.insights}`);
    
    // 7. Mostrar dashboard de competi√ß√£o
    console.log('\n7Ô∏è‚É£ Dashboard de Competi√ß√£o:');
    
    const dashboard = await brandOwnerService.getCompetitionDashboard(sellerId);
    
    if (dashboard.length > 0) {
      console.log('\nüìà An√°lise de Pre√ßos:');
      dashboard.forEach(item => {
        console.log(`
üè∑Ô∏è Nosso Produto: ${item.our_asin}
   vs Competidor: ${item.competitor_asin} (${item.competitor_brand})
   
   üí∞ Nosso Pre√ßo: R$ ${item.our_price || 'N/A'}
   üí∞ Pre√ßo Dele: R$ ${item.competitor_price || 'N/A'}
   üìä Diferen√ßa: R$ ${item.price_difference || 'N/A'} (${item.price_difference_percent || 'N/A'}%)
   üéØ Posi√ß√£o: ${item.price_position}
   
   üèÜ Nosso Ranking: ${item.our_rank || 'N/A'}
   üèÜ Ranking Dele: ${item.competitor_rank || 'N/A'}
   
   ‚≠ê Nossa Avalia√ß√£o: ${item.our_rating || 'N/A'}
   ‚≠ê Avalia√ß√£o Dele: ${item.competitor_rating || 'N/A'}
        `);
      });
    } else {
      console.log('‚ö†Ô∏è Nenhum dado de competi√ß√£o dispon√≠vel ainda');
    }
    
    // 8. Mostrar queries SQL √∫teis
    console.log('\n8Ô∏è‚É£ Queries SQL √∫teis para an√°lise:');
    console.log(`
-- Ver todos os competidores de um seller
SELECT * FROM manual_competitors mc
JOIN brand_owners bo ON mc.brand_owner_id = bo.id
WHERE bo.seller_id = '${sellerId}';

-- Ver hist√≥rico de monitoramento
SELECT * FROM competitor_monitoring
WHERE our_asin = '${ourProduct.asin}'
ORDER BY monitoring_date DESC;

-- Dashboard completo
SELECT * FROM brand_owner_competition_dashboard
WHERE brand_name = '${brandName}';

-- Insights gerados
SELECT * FROM ai_insights
WHERE asin = '${ourProduct.asin}'
AND insight_type = 'manual_competitor'
ORDER BY created_at DESC;
    `);
    
    console.log('\n‚úÖ Configura√ß√£o conclu√≠da!');
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Adicione mais produtos seus e seus competidores');
    console.log('2. Configure monitoramento autom√°tico no PersistentSyncManager');
    console.log('3. Acompanhe os insights gerados sobre diferen√ßas de pre√ßo');
    console.log('4. Use o dashboard para tomar decis√µes estrat√©gicas');
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
    console.error(error.stack);
  } finally {
    await pool.end();
  }
}

// Executar
exampleBrandOwnerSetup().catch(console.error);